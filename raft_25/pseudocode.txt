HERE IS THE PSEUDO CODE FOR RAFT

Raft (1/9): initialisation
on initialisation do
    currentTerm := 0; votedFor := null
    log := hi; commitLength := 0
    currentRole := follower; currentLeader := null
    votesReceived := {}; sentLength := hi; ackedLength := hi
end on
on recovery from crash do
    currentRole := follower; currentLeader := null
    votesReceived := {}; sentLength := hi; ackedLength := hi
end on
on node nodeId suspects leader has failed, or on election timeout do
    currentTerm := currentTerm + 1; currentRole := candidate
    votedFor := nodeId; votesReceived := {nodeId}; lastTerm := 0
    if log.length > 0 then lastTerm := log[log.length − 1].term; end if
    msg := (VoteRequest, nodeId, currentTerm, log.length, lastTerm)
    for each node ∈ nodes: send msg to node
    start election timer
end on


Raft (2/9): voting on a new leader
here c stands for candidate
on receiving (VoteRequest, cId, cTerm, cLogLength, cLogTerm)
at node nodeId do
    if cTerm > currentTerm then
        currentTerm := cTerm; currentRole := follower
        votedFor := null
    end if
    lastTerm := 0
    if log.length > 0 then lastTerm := log[log.length − 1].term; end if
        logOk := (cLogTerm > lastTerm) ∨
        (cLogTerm = lastTerm ∧ cLogLength ≥ log.length)
    if cTerm = currentTerm ∧ logOk ∧ votedFor ∈ {cId, null} then
        votedFor := cId
        send (VoteResponse, nodeId, currentTerm,true) to node cId
    else
        send (VoteResponse, nodeId, currentTerm, false) to node cId
    end if
end on


Raft (3/9): collecting votes
on receiving (VoteResponse, voterId, term, granted) at nodeId do
    if currentRole = candidate ∧ term = currentTerm ∧ granted then
        votesReceived := votesReceived ∪ {voterId}
        if |votesReceived| ≥ d(|nodes| + 1)/2e then
            currentRole := leader; currentLeader := nodeId
            cancel election timer
            for each follower ∈ nodes \ {nodeId} do
                sentLength[follower ] := log.length
                ackedLength[follower ] := 0
                ReplicateLog(nodeId, follower )
            end for
        end if
    else if term > currentTerm then
        currentTerm := term
        currentRole := follower
        votedFor := null
        cancel election timer
    end if
end on

Raft (4/9): broadcasting messages
on request to broadcast msg at node nodeId do
    if currentRole = leader then
        append the record (msg : msg, term : currentTerm) to log
        ackedLength[nodeId] := log.length
        for each follower ∈ nodes \ {nodeId} do
            ReplicateLog(nodeId, follower )
        end for
    else
        forward the request to currentLeader via a FIFO link
    end if
end on
periodically at node nodeId do
    if currentRole = leader then
        for each follower ∈ nodes \ {nodeId} do
            ReplicateLog(nodeId, follower )
        end for
    end if
end do


Raft (5/9): replicating from leader to followers
Called on the leader whenever there is a new message in the log, and also
periodically. If there are no new messages, suffix is the empty list.
LogRequest messages with suffix = hi serve as heartbeats, letting
followers know that the leader is still alive.

function ReplicateLog(leaderId, followerId)
    prefixLen := sentLength[followerId]
    suffix := hlog[prefixLen], log[prefixLen + 1], . . . ,
        log[log.length − 1]i
    prefixTerm := 0
    if prefixLen > 0 then
        prefixTerm := log[prefixLen − 1].term
    end if
    send (LogRequest, leaderId, currentTerm, prefixLen,
        prefixTerm, commitLength, suffix ) to followerId
end function

Raft (6/9): followers receiving messages
on receiving (LogRequest, leaderId, term, prefixLen, prefixTerm,
    leaderCommit, suffix ) at node nodeId do
    if term > currentTerm then
        currentTerm := term; votedFor := null
        cancel election timer
    end if
    if term = currentTerm then
        currentRole := follower; currentLeader := leaderId
    end if
    logOk := (log.length ≥ prefixLen) ∧
        (prefixLen = 0 ∨ log[prefixLen − 1].term = prefixTerm)
    if term = currentTerm ∧ logOk then
        AppendEntries(prefixLen, leaderCommit, suffix )
        ack := prefixLen + suffix .length
        send (LogResponse, nodeId, currentTerm, ack,true) to leaderId
    else
        send (LogResponse, nodeId, currentTerm, 0, false) to leaderId
    end if
end on

Raft (7/9): updating followers’ logs
function AppendEntries(prefixLen, leaderCommit, suffix )
    if suffix .length > 0 ∧ log.length > prefixLen then
        index := min(log.length, prefixLen + suffix .length) − 1
        if log[index ].term 6= suffix [index − prefixLen].term then
            log := hlog[0], log[1], . . . , log[prefixLen − 1]i
        end if
    end if
    if prefixLen + suffix .length > log.length then
        for i := log.length − prefixLen to suffix .length − 1 do
            append suffix [i] to log
        end for
    end if
    if leaderCommit > commitLength then
        for i := commitLength to leaderCommit − 1 do
            deliver log[i].msg to the application
        end for
        commitLength := leaderCommit
    end if
end function


Raft (8/9): leader receiving log acknowledgements
on receiving (LogResponse, follower , term, ack, success) at nodeId do
    if term = currentTerm ∧ currentRole = leader then
        if success = true ∧ ack ≥ ackedLength[follower ] then
            sentLength[follower ] := ack
            ackedLength[follower ] := ack
            CommitLogEntries()
        else if sentLength[follower ] > 0 then
            sentLength[follower ] := sentLength[follower ] − 1
            ReplicateLog(nodeId, follower )
        end if
        else if term > currentTerm then
            currentTerm := term
            currentRole := follower
            votedFor := null
            cancel election timer
    end if
end on


Raft (9/9): leader committing log entries
Any log entries that have been acknowledged by a quorum of nodes are
ready to be committed by the leader. When a log entry is committed, its
message is delivered to the application.

define acks(length) = |{n ∈ nodes | ackedLength[n] ≥ length}|
function CommitLogEntries
    minAcks := d(|nodes| + 1)/2e
    ready := {len ∈ {1, . . . , log.length} | acks(len) ≥ minAcks}
    if ready 6= {} ∧ max(ready) > commitLength ∧
        log[max(ready) − 1].term = currentTerm then
        for i := commitLength to max(ready) − 1 do
            deliver log[i].msg to the application
        end for
        commitLength := max(ready)
    end if
end function